"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[1406],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||s[m]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(8168),r=(n(6540),n(5680));const o={sidebar_position:3,toc_max_heading_level:5},i="vCPU and Multi-core",l={unversionedId:"api/vcpu-and-multicore",id:"api/vcpu-and-multicore",title:"vCPU and Multi-core",description:"Concept",source:"@site/docs/api/vcpu-and-multicore.md",sourceDirName:"api",slug:"/api/vcpu-and-multicore",permalink:"/docs/api/vcpu-and-multicore",draft:!1,editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/docs/api/vcpu-and-multicore.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,toc_max_heading_level:5},sidebar:"docSidebar",previous:{title:"Thread",permalink:"/docs/api/thread"},next:{title:"Lock and Synchronization",permalink:"/docs/api/lock-and-synchronization"}},p={},c=[{value:"Concept",id:"concept",level:3},{value:"Enable multi-core",id:"enable-multi-core",level:3},{value:"1. Create OS thread manually, and initialize the Env",id:"1-create-os-thread-manually-and-initialize-the-env",level:3},{value:"2. Use <code>WorkPool</code>",id:"2-use-workpool",level:3},{value:"Headers",id:"headers",level:4},{value:"Description",id:"description",level:4},{value:"Constructor",id:"constructor",level:4},{value:"Public Method",id:"public-method",level:4},{value:"1. Async Call",id:"1-async-call",level:5},{value:"2. Get vCPU number",id:"2-get-vcpu-number",level:5},{value:"3. Thread Migrate",id:"3-thread-migrate",level:5}],u={toc:c},d="wrapper";function s(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"vcpu-and-multi-core"},"vCPU and Multi-core"),(0,r.yg)("h3",{id:"concept"},"Concept"),(0,r.yg)("p",null,"Photon vCPU == native OS thread"),(0,r.yg)("p",null,"Each vCPU has a scheduler, executing and switching ",(0,r.yg)("a",{parentName:"p",href:"thread"},"threads"),"."),(0,r.yg)("h3",{id:"enable-multi-core"},"Enable multi-core"),(0,r.yg)("p",null,"Currently, there are only two ways in Photon to utilize multiple cores:"),(0,r.yg)("h3",{id:"1-create-os-thread-manually-and-initialize-the-env"},"1. Create OS thread manually, and initialize the Env"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"thread_migrate")," could be used to migrate thread to other vCPU."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"std::thread([]{\n    photon::init();\n    DEFER(photon::fini());\n    \n    auto th = photon::thread_create11(func);\n    photon::thread_migrate(th, vcpu);\n}).detach();\n")),(0,r.yg)("h3",{id:"2-use-workpool"},"2. Use ",(0,r.yg)("inlineCode",{parentName:"h3"},"WorkPool")),(0,r.yg)("h4",{id:"headers"},"Headers"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<photon/thread/workerpool.h>")),(0,r.yg)("h4",{id:"description"},"Description"),(0,r.yg)("p",null,"Create a WorkPool to manage multiple vCPUs, and utilize multi-core."),(0,r.yg)("h4",{id:"constructor"},"Constructor"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"WorkPool(size_t vcpu_num, int ev_engine = 0, int io_engine = 0, int thread_mod = -1);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"vcpu_num")," How many vCPUs to be created for this workpool"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ev_engine")," How to init event engine for these vCPUs"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"io_engine")," How to init io engine for these vCPUs"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"thread_mod")," Threads working mode:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"-1 for non-thread mode"),(0,r.yg)("li",{parentName:"ul"},"0 will create a photon thread for every task"),(0,r.yg)("li",{parentName:"ul"},">","0 will create photon threads from a ",(0,r.yg)("inlineCode",{parentName:"li"},"thread_pool"),". Pool size equals to this number.")))),(0,r.yg)("h4",{id:"public-method"},"Public Method"),(0,r.yg)("h5",{id:"1-async-call"},"1. Async Call"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"template <typename Task>\nint WorkPool::async_call(Task* task);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"async_call")," uses an MPMC Queue to deliver messages to multiple vCPUs inside the WorkPool for execution.\nThe caller does not wait for execution to complete."),(0,r.yg)("li",{parentName:"ul"},"task is usually a new-ed lambda function. It will be automatically deleted after execution.")),(0,r.yg)("p",null,"See this example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"photon::WorkPool pool(4, photon::INIT_EVENT_DEFAULT, photon::INIT_IO_NONE, 32768);\nphoton::semephore sem;\n\npool.async_call(new auto ([&]{\n    photon::thread_sleep(1);\n    sem.signal(1);\n}));\n")),(0,r.yg)("h5",{id:"2-get-vcpu-number"},"2. Get vCPU number"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"int get_vcpu_num();\n")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"The number is only for the WorkPool. The main OS thread doesn't count.")),(0,r.yg)("h5",{id:"3-thread-migrate"},"3. Thread Migrate"),(0,r.yg)("p",null,"WorkPool thread migrate relies on the basic coroutine migrate, not the MPMC Queue."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"int thread_migrate(photon::thread* th = CURRENT, size_t index = -1UL);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"th")," Photon thread that going to migrate"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"index")," Which vCPU in pool to migrate to. if index is not in range [0, vcpu_num), for instance, the default value -1UL,\nit will choose the next vCPU in pool (round-robin).\n")),(0,r.yg)("p",null,"Returns 0 for success, and <0 means failed to migrate."))}s.isMDXComponent=!0}}]);