"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[1714],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||i;return n?o.createElement(m,r(r({ref:t},s),{},{components:n})):o.createElement(m,r({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7331:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const i={sidebar_position:4,toc_max_heading_level:4},r="How to Integrate",l={unversionedId:"introduction/how-to-integrate",id:"introduction/how-to-integrate",title:"How to Integrate",description:"You can either use CMake's FetchContent to download Photon source into your existing C++ project,",source:"@site/docs/introduction/how-to-integrate.md",sourceDirName:"introduction",slug:"/introduction/how-to-integrate",permalink:"/docs/introduction/how-to-integrate",draft:!1,editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/docs/introduction/how-to-integrate.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,toc_max_heading_level:4},sidebar:"docSidebar",previous:{title:"How to Build",permalink:"/docs/introduction/how-to-build"},next:{title:"Write Your First Example",permalink:"/docs/introduction/write-first-example"}},c={},p=[{value:"Modify your <code>CMakeLists.txt</code>",id:"modify-your-cmakeliststxt",level:3},{value:"Case 1: Statically linking your app with Photon",id:"case-1-statically-linking-your-app-with-photon",level:3},{value:"Case 2: Dynamically linking your app with Photon",id:"case-2-dynamically-linking-your-app-with-photon",level:3},{value:"Case 3: Add Photon into your static lib",id:"case-3-add-photon-into-your-static-lib",level:3},{value:"Case 4: Add Photon into your shared lib",id:"case-4-add-photon-into-your-shared-lib",level:3}],s={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-integrate"},"How to Integrate"),(0,a.kt)("p",null,"You can either use CMake's ",(0,a.kt)("inlineCode",{parentName:"p"},"FetchContent")," to download Photon source into your existing C++ project,\nor add this repo as a ",(0,a.kt)("inlineCode",{parentName:"p"},"submodule"),"."),(0,a.kt)("h3",{id:"modify-your-cmakeliststxt"},"Modify your ",(0,a.kt)("inlineCode",{parentName:"h3"},"CMakeLists.txt")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},'cmake_minimum_required(VERSION 3.14 FATAL_ERROR)\n\n# Suppose this is your existing project\nproject(my_project)\n\n# Set some options internally used in Photon\nset(PHOTON_ENABLE_URING OFF CACHE INTERNAL "Enable iouring")\nset(PHOTON_CXX_STANDARD 14 CACHE INTERNAL "C++ standard")\n\n# 1. Fetch Photon repo with specific tag or branch\ninclude(FetchContent)\nFetchContent_Declare(\n    photon\n    GIT_REPOSITORY https://github.com/alibaba/PhotonLibOS.git\n    GIT_TAG main\n)\nFetchContent_MakeAvailable(photon)\n\n# 2. Submodule\nadd_subdirectory(photon)\n')),(0,a.kt)("h3",{id:"case-1-statically-linking-your-app-with-photon"},"Case 1: Statically linking your app with Photon"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"add_executable(my_app ${SOURCES})\ntarget_link_libraries(my_app photon_static)\n")),(0,a.kt)("h3",{id:"case-2-dynamically-linking-your-app-with-photon"},"Case 2: Dynamically linking your app with Photon"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"add_executable(my_app ${SOURCES})\ntarget_link_libraries(my_app photon_shared)\n")),(0,a.kt)("h3",{id:"case-3-add-photon-into-your-static-lib"},"Case 3: Add Photon into your static lib"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"add_library(my_lib STATIC ${SOURCES})\ntarget_link_libraries(my_lib PRIVATE photon_static)\n")),(0,a.kt)("h3",{id:"case-4-add-photon-into-your-shared-lib"},"Case 4: Add Photon into your shared lib"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"add_library(my_lib SHARED ${SOURCES})\ntarget_link_libraries(my_lib PRIVATE -Wl,--whole-archive libphoton.a -Wl,--no-whole-archive)\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"photon_static")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"photon_shared")," targets have already configured include directories for you.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If your lib needs to be installed via CMake's ",(0,a.kt)("inlineCode",{parentName:"p"},"install(EXPORT)"),", you should change ",(0,a.kt)("inlineCode",{parentName:"p"},"photon_static")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"$<BUILD_INTERFACE:photon_static>")," to avoid exporting libphoton.a")))}u.isMDXComponent=!0}}]);