"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[3477],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>_});var i=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),f=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=f(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=f(n),d=o,_=c["".concat(l,".").concat(d)]||c[d]||u[d]||a;return n?i.createElement(_,r(r({ref:t},p),{},{components:n})):i.createElement(_,r({ref:t},p))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var f=2;f<a;f++)r[f]=n[f];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>f});var i=n(8168),o=(n(6540),n(5680));const a={sidebar_position:5,toc_max_heading_level:4},r="Filesystem and IO",s={unversionedId:"api/filesystem-and-io",id:"api/filesystem-and-io",title:"Filesystem and IO",description:"Photon has POSIX-like encapsulations for file and filesystem. You can choose to use the encapsulations or not.",source:"@site/docs/api/filesystem-and-io.md",sourceDirName:"api",slug:"/api/filesystem-and-io",permalink:"/docs/api/filesystem-and-io",draft:!1,editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/docs/api/filesystem-and-io.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,toc_max_heading_level:4},sidebar:"docSidebar",previous:{title:"Lock and Synchronization",permalink:"/docs/api/lock-and-synchronization"},next:{title:"Network",permalink:"/docs/api/network"}},l={},f=[{value:"Namespace",id:"namespace",level:4},{value:"1. Use the encapsulations",id:"1-use-the-encapsulations",level:3},{value:"localfs",id:"localfs",level:4},{value:"fusefs",id:"fusefs",level:4},{value:"cachefs",id:"cachefs",level:4},{value:"2. Use the raw API",id:"2-use-the-raw-api",level:3},{value:"aio wrapper",id:"aio-wrapper",level:4},{value:"io_uring wrapper",id:"io_uring-wrapper",level:4}],p={toc:f},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.yg)(c,(0,i.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"filesystem-and-io"},"Filesystem and IO"),(0,o.yg)("p",null,"Photon has POSIX-like encapsulations for file and filesystem. You can choose to use the encapsulations or not."),(0,o.yg)("h4",{id:"namespace"},"Namespace"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"photon::fs::")),(0,o.yg)("h3",{id:"1-use-the-encapsulations"},"1. Use the encapsulations"),(0,o.yg)("h4",{id:"localfs"},"localfs"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<photon/fs/localfs.h>")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'auto fs = photon::fs::new_localfs_adaptor(".", photon::fs::ioengine_psync);\nif (!fs) {\n    LOG_ERRNO_RETURN(0, -1, "failed to create fs");\n}\nDEFER(delete fs);\n\nauto file = fs->open("test-file", O_WRONLY | O_CREAT | O_TRUNC, 0644);\nif (!file) {\n    LOG_ERRNO_RETURN(0, -1, "failed to open file");\n}\nDEFER(delete file);\n\nssize_t n_written = file->write(buf, 4096);\n')),(0,o.yg)("h4",{id:"fusefs"},"fusefs"),(0,o.yg)("p",null,"To be added..."),(0,o.yg)("h4",{id:"cachefs"},"cachefs"),(0,o.yg)("p",null,"To be added..."),(0,o.yg)("h3",{id:"2-use-the-raw-api"},"2. Use the raw API"),(0,o.yg)("h4",{id:"aio-wrapper"},"aio wrapper"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<photon/io/aio-wrapper.h>")),(0,o.yg)("p",null,"Support libaio and posixaio."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"// `fd` must be opened with O_DIRECT, and the buffers must be aligned\nssize_t libaio_pread(int fd, void *buf, size_t count, off_t offset);\nssize_t libaio_preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset);\nssize_t libaio_pwrite(int fd, const void *buf, size_t count, off_t offset);\nssize_t libaio_pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset);\nstatic int libaio_fsync(int fd) { return 0; }\n\nssize_t posixaio_pread(int fd, void *buf, size_t count, off_t offset);\nssize_t posixaio_pwrite(int fd, const void *buf, size_t count, off_t offset);\nint posixaio_fsync(int fd);\nint posixaio_fdatasync(int fd);\n")),(0,o.yg)("h4",{id:"io_uring-wrapper"},"io_uring wrapper"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<photon/io/iouring-wrapper.h>")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"ssize_t iouring_pread(int fd, void* buf, size_t count, off_t offset, uint64_t timeout);\nssize_t iouring_pwrite(int fd, const void* buf, size_t count, off_t offset, uint64_t timeout);\nssize_t iouring_preadv(int fd, const iovec* iov, int iovcnt, off_t offset, uint64_t timeout);\nssize_t iouring_pwritev(int fd, const iovec* iov, int iovcnt, off_t offset, uint64_t timeout);\nssize_t iouring_send(int fd, const void* buf, size_t len, int flags, uint64_t timeout);\nssize_t iouring_recv(int fd, void* buf, size_t len, int flags, uint64_t timeout);\nssize_t iouring_sendmsg(int fd, const msghdr* msg, int flags, uint64_t timeout);\nssize_t iouring_recvmsg(int fd, msghdr* msg, int flags, uint64_t timeout);\nint iouring_connect(int fd, const sockaddr* addr, socklen_t addrlen, uint64_t timeout);\nint iouring_accept(int fd, sockaddr* addr, socklen_t* addrlen, uint64_t timeout);\nint iouring_fsync(int fd);\nint iouring_fdatasync(int fd);\nint iouring_open(const char* path, int flags, mode_t mode);\nint iouring_mkdir(const char* path, mode_t mode);\nint iouring_close(int fd);\n")),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The IO engine must be set appropriately in ",(0,o.yg)("a",{parentName:"p",href:"./env#init"},"Env initialization"),".")))}u.isMDXComponent=!0}}]);