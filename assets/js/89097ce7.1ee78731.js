"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[8641],{5680:(e,t,r)=>{r.d(t,{xA:()=>g,yg:()=>y});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},g=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),m=c(r),s=a,y=m["".concat(p,".").concat(s)]||m[s]||d[s]||i;return r?n.createElement(y,o(o({ref:t},g),{},{components:r})):n.createElement(y,o({ref:t},g))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},9033:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(8168),a=(r(6540),r(5680));const i={sidebar_position:1,toc_max_heading_level:4},o="File IO Performance",l={unversionedId:"performance/file-io-performance",id:"performance/file-io-performance",title:"File IO Performance",description:"Compare Photon with fio when reading an 3.5TB NVMe raw device.",source:"@site/docs/performance/file-io-performance.md",sourceDirName:"performance",slug:"/performance/file-io-performance",permalink:"/docs/performance/file-io-performance",draft:!1,editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/docs/performance/file-io-performance.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,toc_max_heading_level:4},sidebar:"docSidebar",previous:{title:"Performance",permalink:"/docs/category/performance"},next:{title:"Network Performance",permalink:"/docs/performance/network-performance"}},p={},c=[{value:"Photon",id:"photon",level:3},{value:"Code",id:"code",level:4},{value:"Command",id:"command",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Test cmd",id:"test-cmd",level:3},{value:"Results",id:"results",level:3},{value:"Conclusion",id:"conclusion",level:3}],g={toc:c},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.yg)(m,(0,n.A)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"file-io-performance"},"File IO Performance"),(0,a.yg)("p",null,"Compare Photon with ",(0,a.yg)("inlineCode",{parentName:"p"},"fio")," when reading an 3.5TB NVMe raw device."),(0,a.yg)("h3",{id:"photon"},"Photon"),(0,a.yg)("h4",{id:"code"},"Code"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/alibaba/PhotonLibOS/blob/main/examples/perf/io-perf.cpp"},"https://github.com/alibaba/PhotonLibOS/blob/main/examples/perf/io-perf.cpp")),(0,a.yg)("h4",{id:"command"},"Command"),(0,a.yg)("p",null,"The test program will read-only open the SSD device, and run random reads on that."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"./io-perf --disk_path=/dev/nvme0n1 --disk_size=3000000000000 --io_depth=128 --io_size=4096 --io_uring \n")),(0,a.yg)("h4",{id:"parameters"},"Parameters"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Since we are not able to get disk size without third-party libs, we need to specify the disk_size. Could be any approximate number."),(0,a.yg)("li",{parentName:"ul"},"The default IO engine is libaio. --io_uring means to use io_uring instead. We need to upgrade kernel to 6.x to get the best performance.")),(0,a.yg)("h3",{id:"test-cmd"},"Test cmd"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"fio --filename=/dev/nvme0n1p1 --direct=1 --ioengine=libaio --iodepth=128 --rw=randread --bs=4k --size=100% --group_reporting --name=randread --numjobs=1\n")),(0,a.yg)("h3",{id:"results"},"Results"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"center"}),(0,a.yg)("th",{parentName:"tr",align:"center"},"IO Engine"),(0,a.yg)("th",{parentName:"tr",align:"center"},"IO Type"),(0,a.yg)("th",{parentName:"tr",align:"center"},"IO Size"),(0,a.yg)("th",{parentName:"tr",align:"center"},"IO Depth"),(0,a.yg)("th",{parentName:"tr",align:"center"},"DirectIO"),(0,a.yg)("th",{parentName:"tr",align:"center"},"QPS"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Throughput"),(0,a.yg)("th",{parentName:"tr",align:"center"},"CPU util"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"center"},"Photon"),(0,a.yg)("td",{parentName:"tr",align:"center"},"io_uring"),(0,a.yg)("td",{parentName:"tr",align:"center"},"Rand-read"),(0,a.yg)("td",{parentName:"tr",align:"center"},"4KB"),(0,a.yg)("td",{parentName:"tr",align:"center"},"128"),(0,a.yg)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.yg)("td",{parentName:"tr",align:"center"},"433K"),(0,a.yg)("td",{parentName:"tr",align:"center"},"1.73GB"),(0,a.yg)("td",{parentName:"tr",align:"center"},"100%")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"center"},"Photon"),(0,a.yg)("td",{parentName:"tr",align:"center"},"libaio"),(0,a.yg)("td",{parentName:"tr",align:"center"},"Rand-read"),(0,a.yg)("td",{parentName:"tr",align:"center"},"4KB"),(0,a.yg)("td",{parentName:"tr",align:"center"},"128"),(0,a.yg)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.yg)("td",{parentName:"tr",align:"center"},"346K"),(0,a.yg)("td",{parentName:"tr",align:"center"},"1.38GB"),(0,a.yg)("td",{parentName:"tr",align:"center"},"100%")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"center"},"fio"),(0,a.yg)("td",{parentName:"tr",align:"center"},"libaio"),(0,a.yg)("td",{parentName:"tr",align:"center"},"Rand-read"),(0,a.yg)("td",{parentName:"tr",align:"center"},"4KB"),(0,a.yg)("td",{parentName:"tr",align:"center"},"128"),(0,a.yg)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.yg)("td",{parentName:"tr",align:"center"},"279K"),(0,a.yg)("td",{parentName:"tr",align:"center"},"1.11GB"),(0,a.yg)("td",{parentName:"tr",align:"center"},"100%")))),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"fio only enables 1 job (process).")),(0,a.yg)("h3",{id:"conclusion"},"Conclusion"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Photon could outperform ",(0,a.yg)("inlineCode",{parentName:"li"},"fio")," by 50%, under this circumastance."),(0,a.yg)("li",{parentName:"ul"},"Even if switching the IO engine from ",(0,a.yg)("inlineCode",{parentName:"li"},"io_uring")," to ",(0,a.yg)("inlineCode",{parentName:"li"},"libaio"),", Photon could still surpass.")))}d.isMDXComponent=!0}}]);