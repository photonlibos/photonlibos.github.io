"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[55],{2623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=t(8168),o=(t(6540),t(5680));const a={sidebar_position:4,toc_max_heading_level:4},r="Lock and Synchronization",l={unversionedId:"api/lock-and-synchronization",id:"api/lock-and-synchronization",title:"Lock and Synchronization",description:"- Multiple coroutines in the same OS thread have no visibility issues with each other.",source:"@site/docs/api/lock-and-synchronization.md",sourceDirName:"api",slug:"/api/lock-and-synchronization",permalink:"/docs/api/lock-and-synchronization",draft:!1,editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/docs/api/lock-and-synchronization.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,toc_max_heading_level:4},sidebar:"docSidebar",previous:{title:"vCPU and Multi-core",permalink:"/docs/api/vcpu-and-multicore"},next:{title:"Filesystem and IO",permalink:"/docs/api/filesystem-and-io"}},c={},s=[{value:"Namespace",id:"namespace",level:3},{value:"Headers",id:"headers",level:3},{value:"API",id:"api",level:3},{value:"mutex",id:"mutex",level:4},{value:"spinlock",id:"spinlock",level:4},{value:"scoped_lock",id:"scoped_lock",level:4},{value:"condition_variable",id:"condition_variable",level:4},{value:"semaphore",id:"semaphore",level:4},{value:"rwlock",id:"rwlock",level:4}],u={toc:s},p="wrapper";function d({components:e,...n}){return(0,o.yg)(p,(0,i.A)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"lock-and-synchronization"},"Lock and Synchronization"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Multiple coroutines in the same OS thread have no visibility issues with each other.\nFor example, if multiple coroutines modify variables inside a thread at the same time, we don't need to use atomic\nvariables, and there is no need to pay attention to memory order.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"But sync primitives are still needed, because locks are needed to protect variables from being modified by\nother coroutines, if the lock owner might have a chance to yield its CPU.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"All Photon's synchronization primitives are thead-safe, including the ",(0,o.yg)("inlineCode",{parentName:"p"},"thread_interrupt")," API we introduced before."))),(0,o.yg)("h3",{id:"namespace"},"Namespace"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"photon::")),(0,o.yg)("h3",{id:"headers"},"Headers"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<photon/thread/thread.h>")),(0,o.yg)("h3",{id:"api"},"API"),(0,o.yg)("h4",{id:"mutex"},"mutex"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"class mutex {\npublic:\n    int lock(Timeout timeout = {});\n    int try_lock();\n    void unlock();\n}\n")),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The default value of Timeout is -1UL (microseconds), which means forever.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"// For seq_mutex, threads are guaranteed to get the lock in FIFO order, when there's contention\nclass seq_mutex : public mutex {\n};\n")),(0,o.yg)("h4",{id:"spinlock"},"spinlock"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"class spinlock {\npublic:\n    int lock();\n    int try_lock();\n    void unlock();\n};\n")),(0,o.yg)("h4",{id:"scoped_lock"},"scoped_lock"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"using scoped_lock = locker<mutex>;\n")),(0,o.yg)("h4",{id:"condition_variable"},"condition_variable"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"class condition_variable {\npublic:\n    int wait(mutex* m, Timeout timeout = {});\n    int wait(mutex& m, Timeout timeout = {});\n\n    int wait(spinlock* m, Timeout timeout = {});\n    int wait(spinlock& m, Timeout timeout = {});\n\n    int wait(scoped_lock& lock, Timeout timeout = {});\n    int wait_no_lock(Timeout timeout = {});\n    \n    thread* notify_one();\n    int notify_all();\n};\n")),(0,o.yg)("h4",{id:"semaphore"},"semaphore"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"class semaphore {\npublic:\n    explicit semaphore(uint64_t count = 0);\n    /**\n     * @brief A wrapper of wait that cannot be interrupted\n     */\n    int wait(uint64_t count, Timeout timeout = {});\n    /**\n     * @brief Subtract count.\n     * @return 1) Count is successfully subtracted (might have been waited). Returns 0.\n     *         2) Count is not enough until timeout. Returns -1, errno is set to ETIMEDOUT.\n     *         3) Interrupted by another thread before timeout. Returns -1, errno is decided by the interrupter.\n     */\n    int wait_interruptible(uint64_t count, Timeout timeout = {});\n    /**\n     * @brief Add count. Does not require Photon environment, can be invoked in any std thread.\n     */\n    int signal(uint64_t count);\n    uint64_t count() const;\n};\n")),(0,o.yg)("h4",{id:"rwlock"},"rwlock"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"class rwlock {\npublic:\n    int lock(int mode, Timeout timeout = {});   // mode: RLOCK / WLOCK\n    int unlock();\n};\n")))}d.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var i=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,y=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?i.createElement(y,r(r({ref:n},u),{},{components:t})):i.createElement(y,r({ref:n},u))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<a;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);