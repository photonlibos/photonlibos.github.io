"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[2371],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?i.createElement(k,r(r({ref:t},s),{},{components:n})):i.createElement(k,r({ref:t},s))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<a;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7462),o=(n(7294),n(3905));const a={sidebar_position:4,toc_max_heading_level:4},r="Lock and Synchronization",l={unversionedId:"api/lock-and-synchronization",id:"api/lock-and-synchronization",title:"Lock and Synchronization",description:"- Multiple coroutines in the same OS thread have no visibility issues with each other.",source:"@site/docs/api/lock-and-synchronization.md",sourceDirName:"api",slug:"/api/lock-and-synchronization",permalink:"/docs/api/lock-and-synchronization",draft:!1,editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/docs/api/lock-and-synchronization.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,toc_max_heading_level:4},sidebar:"docSidebar",previous:{title:"vCPU and Multi-core",permalink:"/docs/api/vcpu-and-multicore"},next:{title:"Filesystem and IO",permalink:"/docs/api/filesystem-and-io"}},c={},p=[{value:"Namespace",id:"namespace",level:3},{value:"Headers",id:"headers",level:3},{value:"API",id:"api",level:3},{value:"mutex",id:"mutex",level:4},{value:"spinlock",id:"spinlock",level:4},{value:"scoped_lock",id:"scoped_lock",level:4},{value:"condition_variable",id:"condition_variable",level:4},{value:"semaphore",id:"semaphore",level:4},{value:"rwlock",id:"rwlock",level:4}],s={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lock-and-synchronization"},"Lock and Synchronization"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Multiple coroutines in the same OS thread have no visibility issues with each other.\nFor example, if multiple coroutines modify variables inside a thread at the same time, we don't need to use atomic\nvariables, and there is no need to pay attention to memory order.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But sync primitives are still needed, because locks are needed to protect variables from being modified by\nother coroutines, if the lock owner might have a chance to yield its CPU.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"All Photon's synchronization primitives are thead-safe, including the ",(0,o.kt)("inlineCode",{parentName:"p"},"thread_interrupt")," API we introduced before."))),(0,o.kt)("h3",{id:"namespace"},"Namespace"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"photon::")),(0,o.kt)("h3",{id:"headers"},"Headers"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<photon/thread/thread.h>")),(0,o.kt)("h3",{id:"api"},"API"),(0,o.kt)("h4",{id:"mutex"},"mutex"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class mutex {\npublic:\n    int lock(uint64_t timeout = -1);    // threads are guaranteed to get the lock\n    int try_lock();                     // in FIFO order, when there's contention\n    void unlock();\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The timeout type is ",(0,o.kt)("inlineCode",{parentName:"p"},"uint64_t"),". -1UL means forever.")),(0,o.kt)("h4",{id:"spinlock"},"spinlock"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class spinlock {\npublic:\n    int lock();\n    int try_lock();\n    void unlock();\n};\n")),(0,o.kt)("h4",{id:"scoped_lock"},"scoped_lock"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"using scoped_lock = locker<mutex>;\n")),(0,o.kt)("h4",{id:"condition_variable"},"condition_variable"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class condition_variable {\npublic:\n    int wait(mutex* m, uint64_t timeout = -1);\n    int wait(mutex& m, uint64_t timeout = -1);\n\n    int wait(spinlock* m, uint64_t timeout = -1);\n    int wait(spinlock& m, uint64_t timeout = -1);\n\n    int wait(scoped_lock& lock, uint64_t timeout = -1);\n    int wait_no_lock(uint64_t timeout = -1);\n    \n    thread* notify_one();\n    int notify_all();\n};\n")),(0,o.kt)("h4",{id:"semaphore"},"semaphore"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class semaphore {\npublic:\n    explicit semaphore(uint64_t count = 0);\n    int wait(uint64_t count, uint64_t timeout = -1);\n    int signal(uint64_t count);\n    uint64_t count() const;\n};\n")),(0,o.kt)("h4",{id:"rwlock"},"rwlock"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class rwlock {\npublic:\n    int lock(int mode, uint64_t timeout = -1);  // mode: RLOCK / WLOCK\n    int unlock();\n};\n")))}d.isMDXComponent=!0}}]);