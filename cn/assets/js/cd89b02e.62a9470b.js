"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[7618],{1972:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(8168),a=(n(6540),n(5680));const o={slug:"thread-local",title:"The thread local variable for coroutines",authors:["beef9999"],tags:["thread-local"]},l="The thread local variable for coroutines",i={permalink:"/cn/blog/thread-local",editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/blog/2023-07-28-thread-local.md",source:"@site/i18n/cn/docusaurus-plugin-content-blog/2023-07-28-thread-local.md",title:"The thread local variable for coroutines",description:"As we all know, C++11 introduced the threadlocal keyword to replace the _thread provided by the compiler,",date:"2023-07-28T00:00:00.000Z",formattedDate:"2023\u5e747\u670828\u65e5",tags:[{label:"thread-local",permalink:"/cn/blog/tags/thread-local"}],readingTime:1.115,hasTruncateMarker:!1,authors:[{name:"Bob Chen",title:"Maintainer of PhotonLibOS",url:"https://github.com/beef9999",imageURL:"https://github.com/beef9999.png",key:"beef9999"}],frontMatter:{slug:"thread-local",title:"The thread local variable for coroutines",authors:["beef9999"],tags:["thread-local"]},prevItem:{title:"How to run Photon on top of DPDK",permalink:"/cn/blog/photon-dpdk"}},c={authorsImageUrls:[void 0]},p=[],s={toc:p},u="wrapper";function d({components:e,...t}){return(0,a.yg)(u,(0,r.A)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"As we all know, C++11 introduced the ",(0,a.yg)("inlineCode",{parentName:"p"},"thread_local")," keyword to replace the ",(0,a.yg)("inlineCode",{parentName:"p"},"__thread")," provided by the compiler,\nor the ",(0,a.yg)("inlineCode",{parentName:"p"},"specific key")," related functions provided by the ",(0,a.yg)("inlineCode",{parentName:"p"},"pthread")," library."),(0,a.yg)("p",null,"Here is a typical example of using thread_local."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c++"},"#include <thread>\n\nstatic thread_local int i = 0;\n\nint main() {\n    auto th = std::thread([]{\n        i = 1;\n    });\n    th.join();\n    \n    assert(i == 0);\n}\n")),(0,a.yg)("p",null,"Photon begins to support TLS for coroutines since version 0.4.0. Due to some limitations, Photon cannot achieve the\nsame syntax as ",(0,a.yg)("inlineCode",{parentName:"p"},"thread_local"),", but implements it in a close way."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c++"},"#include <photon/thread/std-compat.h>\n\nstatic photon::thread_local_ptr<int, int> pI(0);\n\nint main() {\n    if (photon::init())\n        abort();\n    DEFER(photon::fini());\n    \n    auto th = photon_std::thread([]{\n        *pI = 1;\n    });\n    th.join();\n    \n    assert(*pI == 0);\n}\n")),(0,a.yg)("p",null,"In this code above, ",(0,a.yg)("inlineCode",{parentName:"p"},"thread_local_ptr")," is a template class that provides pointer-like operators.\nYou need to pass the appropriate constructor type to its template parameter, which in this example, is also a int."),(0,a.yg)("p",null,"When users access it in different coroutines, they will always get a separate value."),(0,a.yg)("p",null,"Below is a more complicated example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c++"},'class Value {\npublic:\n    explicit Value(std::string s) : m_s(std::move(s)) {}\n    size_t size() { return m_s.size(); }\nprivate:\n    std::string m_s;\n};\n\nclass A {\npublic:\n    void func();\nprivate:\n    static photon::thread_local_ptr<Value, std::string> m_value;\n};\n\nstatic photon::thread_local_ptr<Value, std::string> m_value("123");\n\nvoid A::func() {\n    std::cout << "Value size " << m_value->size() << std::endl;\n}\n')))}d.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>m});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);