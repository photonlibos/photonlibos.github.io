"use strict";(self.webpackChunkphoton_website=self.webpackChunkphoton_website||[]).push([[9909],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),g=r,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||l;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9365:(e,n,t)=>{t.d(n,{A:()=>o});var a=t(6540),r=t(53);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,o),hidden:t},n)}},1470:(e,n,t)=>{t.d(n,{A:()=>N});var a=t(8168),r=t(6540),l=t(53),o=t(3104),i=t(6347),s=t(7485),u=t(1682),c=t(9466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.W6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l}))),[s,u]=m({queryString:t,groupId:a}),[p,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,c.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),f=(()=>{const e=s??p;return g({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),h(e)}),[u,h,l]),tabValues:l}}var f=t(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==i&&(p(n),s(a))},g=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:g,onClick:d},o,{className:(0,l.A)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":i===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function k(e){const n=h(e);return r.createElement("div",{className:(0,l.A)("tabs-container",y.tabList)},r.createElement(b,(0,a.A)({},e,n)),r.createElement(v,(0,a.A)({},e,n)))}function N(e){const n=(0,f.A)();return r.createElement(k,(0,a.A)({key:String(n)},e))}},285:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=t(8168),r=(t(6540),t(5680)),l=t(1470),o=t(9365);const i={slug:"photon-dpdk",title:"How to run Photon on top of DPDK",authors:["beef9999"],tags:["DPDK","F-Stack"]},s=void 0,u={permalink:"/cn/blog/photon-dpdk",editUrl:"https://github.com/alibaba/PhotonLibOS/edit/main/doc/blog/2023-07-29-photon-dpdk.md",source:"@site/i18n/cn/docusaurus-plugin-content-blog/2023-07-29-photon-dpdk.md",title:"How to run Photon on top of DPDK",description:"&emsp;&emsp;Since version 0.6, Photon can run on an userspace TCP/IP stack if enabled the INITIOFSTACK_DPDK io engine.",date:"2023-07-29T00:00:00.000Z",formattedDate:"2023\u5e747\u670829\u65e5",tags:[{label:"DPDK",permalink:"/cn/blog/tags/dpdk"},{label:"F-Stack",permalink:"/cn/blog/tags/f-stack"}],readingTime:6.545,hasTruncateMarker:!1,authors:[{name:"Bob Chen",title:"Maintainer of PhotonLibOS",url:"https://github.com/beef9999",imageURL:"https://github.com/beef9999.png",key:"beef9999"}],frontMatter:{slug:"photon-dpdk",title:"How to run Photon on top of DPDK",authors:["beef9999"],tags:["DPDK","F-Stack"]},prevItem:{title:"Stackful Coroutine Made Fast",permalink:"/cn/blog/stackful-coroutine-made-fast"},nextItem:{title:"The thread local variable for coroutines",permalink:"/cn/blog/thread-local"}},c={authorsImageUrls:[void 0]},p=[{value:"Configure SR-IOV on Mellanox ConnectX-4",id:"configure-sr-iov-on-mellanox-connectx-4",level:3},{value:"1. Enable IOMMU",id:"1-enable-iommu",level:4},{value:"2. Set VF number",id:"2-set-vf-number",level:4},{value:"3. Install mlnx_ofed driver",id:"3-install-mlnx_ofed-driver",level:4},{value:"Install DPDK",id:"install-dpdk",level:3},{value:"Install F-Stack",id:"install-f-stack",level:3},{value:"Upgrade pkg-config",id:"upgrade-pkg-config",level:4},{value:"Modify make scripts",id:"modify-make-scripts",level:4},{value:"Build and install",id:"build-and-install",level:4},{value:"Configurations",id:"configurations",level:4},{value:"Run Photon",id:"run-photon",level:3}],d={toc:p},g="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"\u2003","\u2003","Since version 0.6, Photon can run on an userspace TCP/IP stack if enabled the ",(0,r.yg)("inlineCode",{parentName:"p"},"INIT_IO_FSTACK_DPDK")," io engine."),(0,r.yg)("p",null,"\u2003","\u2003",(0,r.yg)("a",{parentName:"p",href:"https://www.f-stack.org/"},"F-Stack")," is an open-source project that has ported the entire ",(0,r.yg)("strong",{parentName:"p"},"FreeBSD"),"\nnetwork stack on top of ",(0,r.yg)("strong",{parentName:"p"},"DPDK"),", and provided userspace sockets and events API.\nWe have integrated Photon's coroutine scheduler with F-Stack, and made a busy-polling program more friendly to DPDK\ndevelopers than ever before. In terms of performance, the network app has seen the improvement of 20% ~ 40%, compared with\nthe Linux kernel based on interrupt."),(0,r.yg)("p",null,"\u2003","\u2003","This article will introduce how to configure SR-IOV on a Mellanox NIC, how to set up F-Stack\nand DPDK environment, how to enable the ",(0,r.yg)("a",{parentName:"p",href:"https://doc.dpdk.org/guides/howto/flow_bifurcation.html"},"Flow Bifurcation"),"\nto filter the specific TCP/IP flow that you only concern, and finally how to run Photon on top of them, in order\nto build a high performance net server."),(0,r.yg)("h3",{id:"configure-sr-iov-on-mellanox-connectx-4"},"Configure SR-IOV on Mellanox ConnectX-4"),(0,r.yg)("h4",{id:"1-enable-iommu"},"1. Enable IOMMU"),(0,r.yg)(l.A,{groupId:"os",queryString:!0,mdxType:"Tabs"},(0,r.yg)(o.A,{value:"CentOS 7",label:"CentOS 7",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# Edit /etc/default/grub\n# Expand GRUB_CMDLINE_LINUX with 'intel_iommu=on iommu=pt pci=realloc'\ngrub2-mkconfig -o /boot/grub2/grub.cfg\nreboot\n"))),(0,r.yg)(o.A,{value:"Debian 10",label:"Debian 10",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# Edit /etc/default/grub\n# Expand GRUB_CMDLINE_LINUX with 'intel_iommu=on iommu=pt'\ngrub-mkconfig -o /boot/grub/grub.cfg\nreboot\n")))),(0,r.yg)("p",null,"Note the ",(0,r.yg)("inlineCode",{parentName:"p"},"pci=realloc")," is a work-around solution for CentOS and RHEL.\nWithout this, kernel would report ",(0,r.yg)("inlineCode",{parentName:"p"},"not enough MMIO resources for SR-IOV"),",\nsee this ",(0,r.yg)("a",{parentName:"p",href:"https://access.redhat.com/solutions/37376"},"issue"),"."),(0,r.yg)("h4",{id:"2-set-vf-number"},"2. Set VF number"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"echo 4 > /sys/class/net/eth0/device/sriov_numvfs\n")),(0,r.yg)("p",null,"\u2003","\u2003","If you are having an Intel NIC, this step is likely to succeed. However, for the Mellanox one,\nit might fail because of the lack of proper mlx driver in your kernel.\nPlease check the result by typing ",(0,r.yg)("inlineCode",{parentName:"p"},"lspci -nn | grep Ethernet")," and see if the NICs' virtual function number is correct."),(0,r.yg)("p",null,"\u2003","\u2003","If succeeded, please jump to the part of 'Install DPDK'."),(0,r.yg)("p",null,"\u2003","\u2003","If failed, you may need to download the official driver from NVidia.\nThere are many available releases in ",(0,r.yg)("a",{parentName:"p",href:"https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/"},"https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/"),",\nyou should choose one that matches to your kernel version and OS version the best.\nAn improper version might lead to compiling error when building kernel modules later."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For example, for CentOS 7 and kernel 5.x, you should choose MLNX_OFED_LINUX-5.4-3.6.8.1-rhel7.2-x86_64.tgz"),(0,r.yg)("li",{parentName:"ul"},"For Debian 10, it is MLNX_OFED_LINUX-5.8-5.1.1.2-debian10.13-x86_64.tgz")),(0,r.yg)("h4",{id:"3-install-mlnx_ofed-driver"},"3. Install mlnx_ofed driver"),(0,r.yg)("p",null,"\u2003","\u2003","First you need to check your gcc version. It has to be the same one that built your kernel.\nOtherwise you will need to upgrade your gcc."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"gcc --version\ncat /proc/version\n")),(0,r.yg)("p",null,"\u2003","\u2003","Note that the NVidia official doc said we should install 'createrepo', but in CentOS 7,\nthere are some tiny bugs of its Python scripts. The 'createrepo_c' package will solve this."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"yum install python-devel tcl tk elfutils-libelf-devel createrepo_c\n")),(0,r.yg)("p",null,"\u2003","\u2003","Because the mlnx_ofed driver has already included rdma packages, to avoid collision,\nI decided to remove all rdma-related rpms previously installed in my test machine."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"rpm -qa | grep rdma\nrpm -e ...\n")),(0,r.yg)("p",null,"\u2003","\u2003","Build and install the driver and the additional packages."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"cd MLNX_OFED_LINUX-5.4-3.6.8.1-rhel7.2-x86_64/\n./mlnxofedinstall --skip-distro-check --add-kernel-support --without-mlnx-nvme --dpdk\n\n# Update initramfs\ndracut -f\n\n# There will be rdma-core, rdma-core-devel, librdmacm and librdmacm-utils.\nrpm -qa | grep rdma\n")),(0,r.yg)("p",null,"\u2003","\u2003","Now we need to restart the server. Be careful, there is a possibility that the interface name\nof your NIC might change, for example, from ",(0,r.yg)("inlineCode",{parentName:"p"},"eth0")," to something like ",(0,r.yg)("inlineCode",{parentName:"p"},"enp3s0f0"),", where 3 for Bus, 0 for Device,\nand 0 for Function, represented in the ",(0,r.yg)("inlineCode",{parentName:"p"},"03:00.0")," BDF notation. It will incur connection failure\nof your server and unable to log in."),(0,r.yg)("p",null,"\u2003","\u2003","To solve this, your first option is to disable the Consistent Interface Device Naming in Linux,\nand then persist the new names by ",(0,r.yg)("inlineCode",{parentName:"p"},"udev rules"),". See the NVidia docs at\n",(0,r.yg)("a",{parentName:"p",href:"https://docs.nvidia.com/networking/display/MLNXOFEDv541030/Changes+and+New+Features#ChangesandNewFeatures-CustomerAffectingChanges"},"1"),",\n",(0,r.yg)("a",{parentName:"p",href:"https://enterprise-support.nvidia.com/s/article/howto-change-network-interface-name-in-linux-permanently"},"2"),"."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Append ",(0,r.yg)("inlineCode",{parentName:"li"},"GRUB_CMDLINE_LINUX")," in ",(0,r.yg)("inlineCode",{parentName:"li"},"/etc/default/grub")," with ",(0,r.yg)("inlineCode",{parentName:"li"},"net.ifnames=0")),(0,r.yg)("li",{parentName:"ol"},"Create the ",(0,r.yg)("inlineCode",{parentName:"li"},"/etc/udev/rules.d/85-net-persistent-names.rules")," with the following content")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},'# PCI device 15b3:1019 (mlx5_core)\n# NAME:="some name" , := is used to make sure that device name will be persistent.\nSUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:02:c9:fa:c3:50", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME:="eth0"\nSUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:02:c9:fa:c3:51", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME:="eth1"\n')),(0,r.yg)("p",null,"\u2003","\u2003","The second option, if you are OK with the new names, you can update the NIC scripts\nin ",(0,r.yg)("inlineCode",{parentName:"p"},"/etc/sysconfig/network-scripts/")," and make them correct."),(0,r.yg)("p",null,"\u2003","\u2003","Finally, everything get ready, just reboot:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"reboot \n")),(0,r.yg)("p",null,"\u2003","\u2003","After reboot:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# Start Mellanox Software Tools Service\nmst start\n\n# Show device name and port mapping\nmst status\nibdev2netdev\n\n# Check firmware capabilities\nmlxconfig -d /dev/mst/mt4117_pciconf0 query | grep NUM_OF_VFS\n\n# Set VF number. Should succeed now\necho 4 > /sys/class/net/enp3s0f0/device/sriov_numvfs\nlspci -nn | grep 'Ethernet controller'\n")),(0,r.yg)("h3",{id:"install-dpdk"},"Install DPDK"),(0,r.yg)("p",null,"\u2003","\u2003","The F-Stack version we choose is ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/F-Stack/f-stack/releases/tag/v1.22.1"},"1.22.1"),",\nand it has a subdirectory called dpdk that contains the full DPDK 20.11 source code.\nLet's start with the DPDK install first."),(0,r.yg)(l.A,{groupId:"os",queryString:!0,mdxType:"Tabs"},(0,r.yg)(o.A,{value:"CentOS 7",label:"CentOS 7",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd f-stack-1.22.1/dpdk/\nyum install python3-pip\nyum install pkg-config numactl-devel zlib-devel ninja\npip3 install meson \n"))),(0,r.yg)(o.A,{value:"Debian 10",label:"Debian 10",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd f-stack-1.22.1/dpdk/\npip3 install ninja meson\napt install pkg-config python3-pyelftools libnuma-dev\n")))),(0,r.yg)("p",null,"Build and install:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"CONFIG_RTE_LIBRTE_MLX5_PMD=y meson -Denable_kmods=true -Dtests=false build\ncd build\nninja\nninja install\n")),(0,r.yg)("p",null,"Allocate 10GB huge-pages"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"echo 5120 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages\n")),(0,r.yg)("p",null,"Attach your PF (with main IP) and one of the VFs (idle) to the poll-mode-driver test"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"./build/app/dpdk-testpmd -l 0-3 -n 4 -a 0000:03:00.0 -a 0000:03:00.2 -- --nb-cores=2 --flow-isolate-all -i -a\n")),(0,r.yg)("p",null,"Note: The ",(0,r.yg)("inlineCode",{parentName:"p"},"--flow-isolate-all")," option is a MUST do. It enables Flow Bifurcation and ensures that all the\nundetermined flow will be forwarded to the Linux kernel. Because the default behavior is to drop all packets, so\nunless you configure the flow table or enable the ",(0,r.yg)("inlineCode",{parentName:"p"},"--flow-isolate-all")," option,\nyour network connection will be lost again ..."),(0,r.yg)("h3",{id:"install-f-stack"},"Install F-Stack"),(0,r.yg)("p",null,"Let's go back to the parent dir and install F-Stack."),(0,r.yg)("h4",{id:"upgrade-pkg-config"},"Upgrade pkg-config"),(0,r.yg)("p",null,"\u2003","\u2003","The ",(0,r.yg)("inlineCode",{parentName:"p"},"pkg-config")," command in CentOS 7 is of version 0.27.1, and it has a ",(0,r.yg)("a",{parentName:"p",href:"https://bugs.freedesktop.org/show_bug.cgi?id=56699"},"bug"),"\nthat does not correctly handle gcc's ",(0,r.yg)("inlineCode",{parentName:"p"},"--whole-archive")," option.\nAs per F-Stack's document, we can upgrade it to ",(0,r.yg)("a",{parentName:"p",href:"https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"},"0.29.2"),"."),(0,r.yg)("p",null,"\u2003","\u2003","Debian 10 is OK."),(0,r.yg)("h4",{id:"modify-make-scripts"},"Modify make scripts"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Edit ",(0,r.yg)("inlineCode",{parentName:"li"},"lib/Makefile"),", comment out ",(0,r.yg)("inlineCode",{parentName:"li"},"DEBUG=..."),". We want a release build."),(0,r.yg)("li",{parentName:"ol"},"Edit ",(0,r.yg)("inlineCode",{parentName:"li"},"lib/Makefile"),", enable ",(0,r.yg)("inlineCode",{parentName:"li"},"FF_FLOW_ISOLATE=1"),". It is the trigger of Flow Bifurcation for TCP. The hardcoded TCP port is 80."),(0,r.yg)("li",{parentName:"ol"},"For CentOS 7, edit ",(0,r.yg)("inlineCode",{parentName:"li"},"mk/kern.mk"),", add ",(0,r.yg)("inlineCode",{parentName:"li"},"-Wno-error=format-overflow")," to ",(0,r.yg)("inlineCode",{parentName:"li"},"CWARNFLAGS"),",\nin case a compiler warning being regarded as error. Debian 10 is OK.")),(0,r.yg)("h4",{id:"build-and-install"},"Build and install"),(0,r.yg)(l.A,{groupId:"os",queryString:!0,mdxType:"Tabs"},(0,r.yg)(o.A,{value:"CentOS 7",label:"CentOS 7",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export FF_PATH=/root/f-stack-1.22.1  # Change to your own dir\nexport REGULAR_PKG_CONFIG_DIR=/usr/lib64/pkgconfig/\nexport DPDK_PKG_CONFIG_DIR=/usr/local/lib64/pkgconfig/\nexport PKG_CONFIG_PATH=$(pkg-config --variable=pc_path pkg-config):${REGULAR_PKG_CONFIG_DIR}:${DPDK_PKG_CONFIG_DIR}\n\ncd f-stack-1.22/lib\nmake -j\nmake install\n"))),(0,r.yg)(o.A,{value:"Debian 10",label:"Debian 10",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export FF_PATH=/root/f-stack-1.22.1  # Change to your own dir\n\ncd f-stack-1.22/lib\nmake -j\nmake install\n")))),(0,r.yg)("h4",{id:"configurations"},"Configurations"),(0,r.yg)("p",null,"\u2003","\u2003","F-Stack has a global config file at ",(0,r.yg)("inlineCode",{parentName:"p"},"/etc/f-stack.conf"),". We need to make a few changes before running it."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Change ",(0,r.yg)("inlineCode",{parentName:"li"},"pkt_tx_delay=100")," to ",(0,r.yg)("inlineCode",{parentName:"li"},"pkt_tx_delay=0"),". So it will send packets immediately, rather than wait for a while."),(0,r.yg)("li",{parentName:"ol"},"Modify the ",(0,r.yg)("inlineCode",{parentName:"li"},"[port0]")," section, including ",(0,r.yg)("inlineCode",{parentName:"li"},"addr"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"netmask"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"broadcast")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"gateway"),". Keep the same to your\ntest machine, because our DPDK app only needs to have a unique TCP port."),(0,r.yg)("li",{parentName:"ol"},"Add ",(0,r.yg)("inlineCode",{parentName:"li"},"pci_whitelist=03:00.0,03:00.2"),". As explained above, the first one is your PF with main IP, the other is one of\nits idle VFs. The Flow Bifurcation will forward specific TCP flow to VF, while leaving the rest traffic to the PF,\nfor the Linux kernel.")),(0,r.yg)("h3",{id:"run-photon"},"Run Photon"),(0,r.yg)("p",null,"\u2003","\u2003","We have provided a new ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/alibaba/PhotonLibOS/blob/main/examples/fstack-dpdk/fstack-dpdk-demo.cpp"},"example"),".\nIt looks quite alike the old echo server example, only a few lines of changes, but now the backend becomes DPDK."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"cd PhotonLibOS\ngit checkout release/0.8\ncmake -B build -D PHOTON_BUILD_TESTING=1 -D PHOTON_ENABLE_FSTACK_DPDK=1 -D CMAKE_BUILD_TYPE=Release\ncmake --build build -j 32 -t fstack-dpdk-demo\n\n./build/output/fstack-dpdk-demo\n")),(0,r.yg)("p",null,"Now you can set up an echo client on another host, and bench this server via port 80."))}m.isMDXComponent=!0}}]);